package com.yuanye.njdt.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuanye.njdt.data.entity.ExampleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXAMPLE_ENTITY".
*/
public class ExampleEntityDao extends AbstractDao<ExampleEntity, Void> {

    public static final String TABLENAME = "EXAMPLE_ENTITY";

    /**
     * Properties of entity ExampleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Label = new Property(0, String.class, "label", false, "LABEL");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property DownloadUrl = new Property(2, String.class, "downloadUrl", false, "DOWNLOAD_URL");
    }


    public ExampleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ExampleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXAMPLE_ENTITY\" (" + //
                "\"LABEL\" TEXT," + // 0: label
                "\"TYPE\" TEXT," + // 1: type
                "\"DOWNLOAD_URL\" TEXT);"); // 2: downloadUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXAMPLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ExampleEntity entity) {
        stmt.clearBindings();
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(1, label);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(3, downloadUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ExampleEntity entity) {
        stmt.clearBindings();
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(1, label);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(3, downloadUrl);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ExampleEntity readEntity(Cursor cursor, int offset) {
        ExampleEntity entity = new ExampleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // label
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // downloadUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ExampleEntity entity, int offset) {
        entity.setLabel(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownloadUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ExampleEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ExampleEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(ExampleEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
